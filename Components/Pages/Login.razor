@page "/login"
@using BlazingBlog.Models;
@using BlazingBlog;
@using System.ComponentModel.DataAnnotations;
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject BlogAuthenticationStateProvider BlogAuthStatePrvider
@inject NavigationManager NavigationManager //ตัวแปรที่อ้างอิงคลาสที่ชื่อว่าnavigationmanager//

@if(_isProcessing)
{
    <div class="overlay postion-fixed"></div>
    <div class="loading-wrapper position-fixed d-flex justify-content align-items-center">
        <div class="loading-text fs-1 text-white">Logging-in......</div>
    </div>
} 

<EditForm Model="_model" OnValidSubmit="LoginAsync"> @* editform ผู้ใช้สามารถแก้ไขฟิลด์เหล่านั้น สร้างเรกคอร์ด และบันทึกการเปลี่ยนแปลงเหล่านั้นไปยังแหล่งข้อมูลได้ *@
    <DataAnnotationsValidator /> @*Arrow to data vilidation*@
<div class="container mt-5 d-flex justify-content-center"> 
    @*ใน container นี้แยกเป็นส่วน ๆ และจัดแต่งแต่ละส่วน มี header / body/ footer ของกล่อง login*@
    @*mt-5 เป็น space เว้นห่างจากด้านบน*@
    <div class="card" style="width: 450px"> @*กรอบ login กว้าง 450px*@
        <div class="card-header"
            <h2>Login</h2>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label class="form-label">Username</label>@* สร้าง labelของช่อง input  *@
                <InputText @bind-Value="_model.Username" class="form-control" placeholder="Enter username" />@*ช่อง input ที่ให้ในช่องมีข้อความว่า enter username*@
               @*bind-value คือการผูกค่ากับตัวแปร _model อ้างอิงกับ class loginmodel ซึ่งมี field username*@
                <ValidationMessage For="()=> _model.Username" />
            </div>

            @if(!string.IsNullOrWhiteSpace(_error))
            {
                <p class="text-danger">@_error</p>
            }
            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText type="password" @bind-Value="_model.Password" class="form-control" placeholder="Enter password" />
                <ValidationMessage For="()=> _model.Password" />
            </div>
        </div>
        <div class="card-footer">
            <button type="submit" class="btn bth-success btn-sm">Login</button>
        </div>
    </div>   
</div>
 </EditForm>
 @code {
    
    private LoginModel _model = new(); //สร้างobject-user ใหม่ที่อ้างมาจาก loginmodel class in model/loginmodes.cs
    //ใช้เช็คหากไม่มีการคลิกที่ปุ่ม 5 นาที ใช้ boolean
    private bool _isProcessing = false; //ข้อมูลที่มีค่าเป็น 0 / 1 false/ture
    private string? _error = null;

    private async Task LoginAsync()
    {
        _error = null;
        _isProcessing = true;
        try
        {
            BlogAuthStatePrvider.
            //await Task.Delay(5000); //set delay 5 วินาที
            throw new Exception("test exception"); //เมื่อ login จะแสดงข้อความ test excetion
            NavigationManager.NavigateTo("/"); //เราจะกลับไปที่หน้า homepage เมื่อ login
            //การเรียกใช้งานตัวแปร inject เข้ามาด้านบนโดยการอ้างถึงตัวแปร.สิ่งที่ต้องการให้ทำ
        }
        catch(Exception ex)
        {
            _isProcessing = false;
            _error = ex.Message;
            throw;
        }
    }   
}

